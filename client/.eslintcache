[{"/home/anson/TSE/Supply-Chain/client/src/index.js":"1","/home/anson/TSE/Supply-Chain/client/src/App.js":"2","/home/anson/TSE/Supply-Chain/client/src/add_button/AddButton.js":"3","/home/anson/TSE/Supply-Chain/client/src/MongodbFunctions.js":"4"},{"size":268,"mtime":1611358694323,"results":"5","hashOfConfig":"6"},{"size":689,"mtime":1611358694323,"results":"7","hashOfConfig":"6"},{"size":4555,"mtime":1611376840066,"results":"8","hashOfConfig":"6"},{"size":524,"mtime":1611618832158,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1spl2d4",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/anson/TSE/Supply-Chain/client/src/index.js",[],["20","21"],"/home/anson/TSE/Supply-Chain/client/src/App.js",[],"/home/anson/TSE/Supply-Chain/client/src/add_button/AddButton.js",["22","23"],"import React, {useState} from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form'\nimport DatePicker from 'react-datepicker'\nimport NumericInput from 'react-numeric-input';\nimport {postNewItem} from '../MongodbFunctions';\n\nimport './AddButton.scss'\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction AddButton() {\n    const [formRendered, toggleFormRendered] = useState(false);\n\n    return (\n        <div className=\"AddButton\">\n            <Button variant=\"dark\" onClick={() => toggleFormRendered(!formRendered)}>Add Item</Button>\n            {formRendered && <AddItemForm closeForm={() => toggleFormRendered(false)}></AddItemForm>}\n        </div>\n    )\n}\n\nfunction AddItemForm(props) {\n    // Input fields\n    const [itemName, setItemName] = useState('');\n    const [itemId, setItemId] = useState('');\n    const [lbPerHouse, setLbPerHouse] = useState(0);\n    const [weight, setWeight] = useState(0);\n    const [outByDate, setoutByDate] = useState(new Date());\n\n    const [showWeightWarning, setWeightWarning] = useState(false);\n    // Logic for adding recommendations will need to be added \n    const [rec, setRec] = useState([]);\n    \n    return (\n        <div className=\"add_item_form_container\">\n            <Form className=\"add_item_form\">\n                <Form.Group className=\"input_field_container\">\n                    <Form.Group>\n                        <Form.Label>Item Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Eg. Apples\" onChange={event => setItemName(event.target.value.trim().toLowerCase())}/>\n                    </Form.Group>\n\n                    <b>OR</b>\n\n                    <Form.Group>\n                        <Form.Label>Item Number</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Eg. 1234\" onChange={event => {setItemId(event.target.value.trim().toLowerCase())}}/>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Weight(lbs)</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Eg. 50\" \n                            onChange={event => {\n                                let val = Number(event.target.value.trim());\n\n                                // Checks for valid integer\n                                if (val !== Infinity && String(val) == val) {\n                                    setWeight(val);\n                                    setWeightWarning(false);\n                                }\n                                else {\n                                    setWeightWarning(true);\n                                }\n                            }\n                        }/>\n                        {showWeightWarning && <Form.Text className=\"warning\">Invalid weight value</Form.Text>}\n                    </Form.Group>\n                    \n                    <Form.Group>\n                        <Form.Label>Out by date</Form.Label>\n                        <DatePicker selected={outByDate} onChange={date => setoutByDate(date)}/> \n                    </Form.Group>\n\n                    <Form.Group>\n                        <NumericInput min = {0} size={1} value={lbPerHouse} onChange={val => setLbPerHouse(val)}/>\n                        lbs per Household\n                        <p id=\"household_calculator\">= { (weight >= 0 && lbPerHouse > 0) ? weight / lbPerHouse : 0 } households </p>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <div >\n                            Recommendations\n                            {(rec.length === 0)  ?\n                                <p className =\"recommendation_pos\">No Issues</p> :\n                                rec.map(txt=>{return <p className=\"recommendations_neg\">{txt}</p>})\n                            }\n                        </div>\n                    </Form.Group>\n                </Form.Group>\n\n                <Button variant='light' onClick={() => props.closeForm()}>Cancel</Button>\n                <Button variant='primary' onClick={() => {\n                    // Perform checks for valid inputs\n                    if (true) {\n                        postNewItem(itemName, itemId, weight, outByDate);\n                        props.closeForm();\n                    }\n                    // Handle improper inputs\n                    else {\n                        \n                    }\n                    \n                }}>Submit</Button>\n            </Form>\n        </div>\n    )\n}\n\nexport default AddButton;","/home/anson/TSE/Supply-Chain/client/src/MongodbFunctions.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":33,"column":17,"nodeType":"30","messageId":"31","endLine":33,"endColumn":23},{"ruleId":"32","severity":1,"message":"33","line":58,"column":69,"nodeType":"34","messageId":"35","endLine":58,"endColumn":71},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'setRec' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]